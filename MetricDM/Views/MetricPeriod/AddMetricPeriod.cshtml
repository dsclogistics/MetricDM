@model MetricDM.Models.MTRC_METRIC_PERIOD

@{
    ViewBag.Title = "AddMetricPeriod";
    Layout = "~/Views/Shared/_Layout.cshtml";
    string metricType = (ViewBag.metricType == null) ? "" : ViewBag.metricType;
    string minGoal = metricType.Equals("pct") ? ((double)(Model.mtrc_period_min_val ?? 0) * 100).ToString() : ((double)(Model.mtrc_period_min_val ?? 0)).ToString();
    string maxGoal = metricType.Equals("pct") ? ((double)(Model.mtrc_period_max_val ?? 0) * 100).ToString() : ((double)(Model.mtrc_period_max_val ?? 0)).ToString();
}

<style>
    .metric-period > .indicate-defaulted-value, .asterisk:after {
        content: "*";
    }

    .metric-period > .color-defaulted-value {
        background-color: antiquewhite;
    }

    .ui-dialog-titlebar-close {
        padding: 0 !important;
    }

        .ui-dialog-titlebar-close:after {
            content: '';
            width: 20px;
            height: 20px;
            display: inline-block;
            /* Change path to image*/
            background-image: url(/Content/images/ui-icons_777777_256x240.png);
            background-position: -96px -128px;
            background-repeat: no-repeat;
        }

    #menu-outer {
        height: 73px;
        border: 1px solid black;
        border-radius: 7px;
        margin-top: 5px;
        margin-bottom: 8px;
    }

    .ui-state-highlight {
        height: 1.5em;
        line-height: 1.2em;
        width: 85px;
    }

    .table1 {
        display: table; /* Allow the centering to work */
        margin: 0 auto;
    }

    ul#horizontal-list {
        min-width: 696px;
        list-style: none;
        list-style-type: none;
        /*padding-top: 20px;*/
        margin: 0;
        margin-top: 25px;
        padding: 0;
    }

    ul#horizontal-list li {
            display: inline;
            border: 1px solid blue;
            border-radius: 5px;
            padding: 5px;
            margin-left: 5px;
    }

    ul#horizontal-list li label {
                cursor: pointer;
    }
    .fieldError {
        color: white !important;
        background-color:#fe6b42 !important;
    }
</style>

<link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
<h2>Add New Metric Period</h2>
<div> <input type="hidden" id="orig_mtrc_id" value="@Model.mtrc_id" /></div>

@using (Html.BeginForm("AddMetricPeriod", "MetricPeriod", FormMethod.Post, new { enctype = "multipart/form-data", id = "frmAddMP" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="row" style="margin-top:5px">
        <div class="col-md-4 col-md-offset-4  col-sm-6 col-sm-offset-3">
            <div class="input-group metric-period">
                @Html.LabelFor(model => model.mtrc_id, "For Metric", htmlAttributes: new { @class = "input-group-addon", style = "font-weight:bold; min-width:130px" })
                @Html.DropDownList("mtrc_id", null, "--- Select Metric ---", htmlAttributes: new { @class = "form-control" })
                @*@Html.ValidationMessageFor(model => model.mtrc_id, "", new { @class = "text-danger" })*@
            </div>
        </div>
    </div>
    @*<div class="row" style="text-align:center;">
            <span>Metric Is:[@ViewBag.metricId] @ViewBag.metricName</span>
        </div>*@
    <span font-size:large; font-weight:bold"> </span>
    <span id="saveMessage" class="alert-success" style="display:none; font-size:large; font-weight:bold"> </span>
    <br />

    <div class="row" style="margin-top:5px">
        <div class="col-md-4 col-sm-3">
            <div class="input-group metric-period" style="height:55px">
                @Html.LabelFor(model => model.mtrc_period_name, htmlAttributes: new { @class = "input-group-addon", style = "font-weight:bold" })
                @Html.EditorFor(model => model.mtrc_period_name, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter Name", style = "min-width:100%; height:55px;" } })
                @*@Html.ValidationMessageFor(model => model.mtrc_period_name, "", new { @class = "text-danger" })*@
            </div>
        </div>
        <div class="col-md-8 col-sm-9">
            <div class="input-group metric-period">
                @Html.LabelFor(model => model.mtrc_period_desc, htmlAttributes: new { @class = "input-group-addon indicate-defaulted-value asterisk", style = "font-weight:bold" })
                @Html.EditorFor(model => model.mtrc_period_desc, new { htmlAttributes = new { @class = "form-control color-defaulted-value", placeholder = "Enter Description", style = "min-width:100%" } })
                @*@Html.ValidationMessageFor(model => model.mtrc_period_desc, "", new { @class = "text-danger" })*@
            </div>
        </div>
    </div>

    <div class="row" style="margin-top:5px">
        <div class="col-md-3 col-sm-6">
            <div class="input-group metric-period">
                @Html.LabelFor(model => model.tpt_id, htmlAttributes: new { @class = "input-group-addon", style = "font-weight:bold; min-width:130px" })
                @*@Html.EditorFor(model => model.tpt_id, new { htmlAttributes = new { @class = "form-control", placeholder = "___" } })*@
                @Html.DropDownList("tpt_id", null, "--- Select Time Period ---", htmlAttributes: new { @class = "form-control", id = "tpt_id" })
                @*@Html.ValidationMessageFor(model => model.tpt_id, "", new { @class = "text-danger" })*@
            </div>
        </div>
        <div class="col-md-3 col-sm-6">
            <div class="input-group metric-period">
                @Html.LabelFor(model => model.mtrc_period_token, htmlAttributes: new { @class = "input-group-addon", style = "font-weight:bold; min-width:90px" })
                @Html.EditorFor(model => model.mtrc_period_token, new { htmlAttributes = new { @class = "form-control mustUpperCase", placeholder = "Enter Token", id = "mtrc_period_token" } })
                @*@Html.ValidationMessageFor(model => model.mtrc_period_token, "", new { @class = "text-danger" })*@
            </div>
        </div>
        <div class="col-md-3 col-sm-6">
            <div class="input-group metric-period">
                @Html.LabelFor(model => model.mtrc_period_max_dec_places, htmlAttributes: new { @class = "input-group-addon indicate-defaulted-value asterisk", style = "font-weight:bold; min-width:133px" })
                @Html.EditorFor(model => model.mtrc_period_max_dec_places, new { htmlAttributes = new { @class = "form-control color-defaulted-value", placeholder = "Enter Max Decimals" } })
                @*@Html.ValidationMessageFor(model => model.mtrc_period_max_dec_places, "", new { @class = "text-danger" })*@
            </div>
        </div>
        <div class="col-md-3 col-sm-6">
            <div class="input-group metric-period">
                @Html.LabelFor(model => model.mtrc_period_calc_yn, htmlAttributes: new { @class = "input-group-addon", style = "font-weight:bold; min-width:133px" })
                @Html.EditorFor(model => model.mtrc_period_calc_yn, new { htmlAttributes = new { @class = "form-control mustUpperCase", placeholder = "Y/N?" } })
                @*@Html.ValidationMessageFor(model => model.mtrc_period_calc_yn, "", new { @class = "text-danger" })*@
            </div>
        </div>
    </div>

    <div>
        @Html.ValidationMessageFor(model => model.tpt_id, "", new { @class = "text-danger" })
        @Html.ValidationMessageFor(model => model.mtrc_period_name, "", new { @class = "text-danger" })
        @Html.ValidationMessageFor(model => model.mtrc_period_token, "", new { @class = "text-danger" })
    </div>

    <div class="row" style="margin-top:5px">
        <div class="col-md-3 col-sm-6">
            <div class="input-group metric-period">
                @Html.LabelFor(model => model.mtrc_period_min_val, htmlAttributes: new { @class = "input-group-addon indicate-defaulted-value asterisk", style = "font-weight:bold; min-width:130px" })
                @Html.EditorFor(model => model.mtrc_period_min_val, new { htmlAttributes = new { @class = "form-control color-defaulted-value", placeholder = "Enter Min Value" } })
            </div>
        </div>
        <div class="col-md-3 col-sm-6">
            <div class="input-group metric-period">
                @Html.LabelFor(model => model.mtrc_period_max_val, htmlAttributes: new { @class = "input-group-addon indicate-defaulted-value asterisk", style = "font-weight:bold; min-width:90px" })
                @Html.EditorFor(model => model.mtrc_period_max_val, new { htmlAttributes = new { @class = "form-control color-defaulted-value", placeholder = "Enter Max Value" } })
            </div>
        </div>
        <div class="col-md-3 col-sm-6">
            <div class="input-group metric-period">
                @Html.LabelFor(model => model.mtrc_period_na_allow_yn, htmlAttributes: new { @class = "input-group-addon indicate-defaulted-value asterisk", style = "font-weight:bold; min-width:133px" })
                @Html.EditorFor(model => model.mtrc_period_na_allow_yn, new { htmlAttributes = new { @class = "form-control mustUpperCase color-defaulted-value", placeholder = "Y/N?" } })
            </div>
        </div>
        <div class="col-md-3 col-sm-6 metric-period">
            @if (metricType == "str" || metricType == "char")
            {
            <div class="input-group">
                @Html.LabelFor(model => model.mtrc_period_max_str_size, htmlAttributes: new { @class = "input-group-addon indicate-defaulted-value asterisk", style = "font-weight:bold; min-width:133px" })
                @Html.EditorFor(model => model.mtrc_period_max_str_size, new { htmlAttributes = new { @class = "form-control color-defaulted-value", placeholder = "Enter Max String Size" } })
            </div>
            }
        </div>
    </div>

    <div>
        @Html.ValidationMessageFor(model => model.mtrc_period_min_val, "", new { @class = "text-danger" })
        @Html.ValidationMessageFor(model => model.mtrc_period_max_val, "", new { @class = "text-danger" })
        @Html.ValidationMessageFor(model => model.mtrc_period_max_dec_places, "", new { @class = "text-danger" })
        @Html.ValidationMessageFor(model => model.mtrc_period_max_str_size, "", new { @class = "text-danger" })
    </div>

    <div class="row" style="margin-top:5px">
        <div class="col-md-3 col-sm-6">
            <div class="input-group metric-period">
                @Html.LabelFor(model => model.mtrc_period_can_import_yn, htmlAttributes: new { @class = "input-group-addon", style = "font-weight:bold; min-width:130px" })
                @Html.EditorFor(model => model.mtrc_period_can_import_yn, new { htmlAttributes = new { @class = "form-control mustUpperCase", placeholder = "Y/N?" } })
            </div>
        </div>
        <div class="col-md-3 col-sm-6">
            <div class="input-group metric-period">
                @Html.LabelFor(model => model.mtrc_period_is_auto_yn, htmlAttributes: new { @class = "input-group-addon", style = "font-weight:bold; min-width:90px" })
                @Html.EditorFor(model => model.mtrc_period_is_auto_yn, new { htmlAttributes = new { @class = "form-control mustUpperCase", placeholder = "Y/N?" } })
            </div>
        </div>
        <div class="col-md-3 col-sm-6 metric-period">
            <div class="input-group metric-period">
                <label class="input-group-addon" for="mtrc_prod_display_text" style="font-weight:bold; min-width:133px">Column Display Text</label>
                <input class="form-control text-box single-line" id="mtrc_prod_display_text" name="mtrc_prod_display_text" placeholder="Enter Col Title" type="text" value="" />
            </div>
        </div>

        <div class="col-md-3 col-sm-6 metric-period">
        </div>
    </div>
    <div>
        @Html.ValidationMessageFor(model => model.mtrc_period_na_allow_yn, "", new { @class = "text-danger" })
        @Html.ValidationMessageFor(model => model.mtrc_period_can_import_yn, "", new { @class = "text-danger" })
        @Html.ValidationMessageFor(model => model.mtrc_period_is_auto_yn, "", new { @class = "text-danger" })
    </div>

}

@Html.Action("_productMetricColumns")

<div class="panel panel-primary" style="margin:0 auto; margin-top:15px; max-width:95%; border-top-width:2px">
    <div class="panel-heading" style="padding:4px">METRIC PERIOD GOAL</div>
    <div class="panel-body" style="min-height: 195px; margin:0 auto; padding: 15px 0px 0px 0px;">
        <div class="row " style="margin:0; width:100%; padding-left:5px">
            <div class="col-xs-12 col-sm-4 col-md-5 bordered-rnd" style="padding:0">
                <div style="background-color: #f4f4f4">Goal Effective Dates</div>
                <div style="text-align:left; padding:5px 10px;">
                    <div class="row" style="margin:0 auto">
                        <table style="margin:0 auto; width:100%">
                            <tr>
                                <td style="width:50%; text-align:center">
                                    <div class="input-group">
                                        <label class="input-group-addon" for="effStartDate" style="font-weight:bold; min-width:60px">Start</label>
                                        <input class="form-control text-box single-line" id="effStartDate" name="effStartDate" placeholder="yyyy/mm/dd" type="text" style="width:150px" />
                                    </div>
                                </td>
                                <td style="width:50%; text-align:center">
                                    <div class="input-group">
                                        <label class="input-group-addon" for="effEndDate" style="font-weight:bold; min-width:60px">End</label>
                                        <input class="form-control text-box single-line" id="effEndDate" name="effEndDate" placeholder="yyyy/mm/dd" type="text" style="width:150px" />
                                    </div>
                                </td>
                            </tr>
                        </table>
                    </div>
                </div>
            </div>
            <div class="col-xs-12 col-sm-4 col-md-3 col-md-offset-1" style="padding:0; padding-top:17px">
                <div style="text-align:left; padding-left:10px;">
                    <div class="input-group">
                        <label class="input-group-addon" for="flgBldgOverride" style="font-weight:bold; min-width:120px">Allow Bldg Override</label>
                        <input class="form-control text-box single-line" id="flgBldgOverride" name="flgBldgOverride" placeholder="Y/N" type="text" style="width:80px" />
                    </div>
                </div>
            </div>

            <div class="col-xs-12 col-sm-4 col-md-3 " style="padding:0; padding-top:17px">
                <div></div>
                <div style="text-align:left; padding-left:10px;">
                    <div class="input-group">
                        <label class="input-group-addon" for="goal_disp_text" style="font-weight:bold; min-width:120px">Goal Disp Text</label>
                        <input class="form-control text-box single-line" id="goal_disp_text" name="goal_disp_text" type="text" style="width:150px" disabled="disabled" />
                    </div>
                </div>
            </div>
        </div>
        <div class="row" style="margin:0 auto; padding:2px; margin-top:5px; background-color:#f4f4f4">
            Adjust the Metric Goal Values
        </div>
        <div class="row " style="margin:0 auto; padding-top:5px; height:65px">
            <div class="col-xs-4 col-sm-4 col-md-3" style="padding:0; position:static">
                <div style="position:relative; max-width:250px">
                    <div style="position: absolute; top: -6px; left: 0; z-index: 02; margin-left: 10px; width:279px">
                        <span style="float:left">@minGoal</span>
                        <span style="float:right">@maxGoal</span>
                    </div>
                    <div id="divRangeSlider" style="position: absolute; top: 10px; left: 0; z-index: 03; margin-left: 10px">
                        <input type="range" id="leftRange" value="@minGoal" min="@minGoal" max="@maxGoal" step="1" width="300" style="width:300px;" />
                        <input type="range" id="rightRange" value="@maxGoal" min="@minGoal" max="@maxGoal" step="1" style="width:300px" />
                    </div>
                    <div id="divRangeColors" style="position: absolute; top: 10px; left: 0; z-index: 01;margin-left:10px; display:none">
                        <table style="width:279px">
                            <tr>
                                <td><div id="divRange1" style="background-color:red; width:93px; height:40px; "></div></td>
                                <td><div id="divRange2" style="background-color:green; width:93px; height:40px; "></div></td>
                                <td><div id="divRange3" style="background-color:blue; width:93px; height:40px; "></div></td>
                            </tr>
                        </table>
                    </div>
                    <div style="position: absolute; top: 55px; left: 0; z-index: 10; margin-left: 10px; width:279px;">
                        <div>
                            <span style="float:left"><input type="checkbox" checked="checked" /></span>
                            <span style="float:right"><input type="checkbox" checked="checked" /></span>
                        </div>
                        <div>
                            <span style="float:left; font-size: x-small; margin-left:5px; margin-top:5px">Include Lower Limit</span>
                            <span style="float:right; font-size: x-small; margin-right:5px; margin-top:5px">Include Upper Limit</span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-xs-4 col-sm-4 col-md-3" style="padding:0; position:static">
                <br />
                <input type="text" id="selRange" name="selRange" style="min-width:300px;" value="@minGoal to @maxGoal" disabled="disabled" />
            </div>
        </div>
    </div>
</div>

<hr />
<div class="form-horizontal">
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="button" id="addMP" value="Create Metric Period" class="btn btn-default" disabled="disabled" />
            <input type="button" id="btnDebug" value="Debug Form Values" class="btn btn-default" />
            <input type="button" id="btnReset" value="Reset Form Values" class="btn btn-default">
        </div>
    </div>
</div>


<br />
<div>
    @Html.ActionLink("Back to List", "MetricMaintenance", "MetricPeriod", new { id = ViewBag.metric_id }, null)
</div>
<br /><br />



<script>
    function formatI(iValue, type) {
        //switch (type) {
        //    'str':
        //    "char":
        //    return iValue;
        //    break;
        //    int
        //    dec
        //    cur
        //    pct

        //}
    }

    function reloadFill() {
        $('#divRange1').css('background-color', 'white');
    }

    function validateInput() {
        var eMsg = "";
        mpName = $('#mtrc_period_name');
        mpDesc = $('#mtrc_period_desc');
        mpType = $('#tpt_id');
        mpToken = $('#mtrc_period_token');
        mMaxDec = $('#mtrc_period_max_dec_places');
        mpCalc = $('#mtrc_period_calc_yn');
        mpMin = $('#mtrc_period_min_val');
        mpMax = $('#mtrc_period_max_val');
        mpNA = $('#mtrc_period_na_allow_yn');
        mpImport = $('#mtrc_period_can_import_yn');
        mpAuto = $('#mtrc_period_is_auto_yn');
        mpDispText = $('#mtrc_prod_display_text');

        if (mpName.val() == "") { eMsg += "Metric Period Name is Required\n"; mpName.addClass("fieldError"); }
        if (mpDesc.val() == "") { eMsg += "Metric Period Description is Required\n"; mpDesc.addClass("fieldError"); }
        if (mpType.val() == 0) { eMsg += "Select a Metric Type\n"; mpType.addClass("fieldError"); }
        if (mpToken.val() == "") { eMsg += "Metric Period Token is Required\n"; mpToken.addClass("fieldError"); }
        if (mMaxDec.val() == "") { eMsg += "Metric Period Max Decimals Value is Required\n"; mMaxDec.addClass("fieldError"); }
        if (Number(mMaxDec.val()) == "NaN") { eMsg += "Metric Period Max Decimals Value Must be Numeric\n"; mMaxDec.addClass("fieldError"); }
        if (mpCalc.val() == "") { eMsg += "Metric Period Calculated Flag is Required\n"; mpCalc.addClass("fieldError"); }
        if (!(mpCalc.val() == "Y" || mpCalc.val() == "N")) { eMsg += "Metric Period Calculated Flag Must be 'Y' or 'N'\n"; mpCalc.addClass("fieldError"); }
        if (mpMin.val() == "") { eMsg += "Metric Period Minimum Value is Required\n"; mpMin.addClass("fieldError"); }
        if (Number(mpMin.val()) == "NaN") { eMsg += "Metric Period Minimum Value Must be Numeric\n"; mpMin.addClass("fieldError"); }
        if (mpMax.val() == "") { eMsg += "Metric Period Maximum Value is Required\n"; mpMax.addClass("fieldError"); }
        if (Number(mpMax.val()) == "NaN") { eMsg += "Metric Period Maximum Value Must be Numeric\n"; mpMax.addClass("fieldError"); }
        if (mpNA.val() == "") { eMsg += "Metric Period 'NA Allowed' Flag is Required\n"; mpNA.addClass("fieldError"); }
        if (!(mpNA.val() == "Y" || mpNA.val() == "N")) { eMsg += "Metric Period 'NA Allowed' Flag Must be 'Y' or 'N'\n"; mpNA.addClass("fieldError"); }
        if (mpImport.val() == "") { eMsg += "Metric Period 'Can Inport' Flag is Required\n"; mpImport.addClass("fieldError"); }
        if (!(mpImport.val() == "Y" || mpImport.val() == "N")) { eMsg += "Metric Period 'Can Import' Flag Must be 'Y' or 'N'\n"; mpImport.addClass("fieldError"); }
        if (mpAuto.val() == "") { eMsg += "Metric Period 'Is Automatic' Flag is Required\n"; mpAuto.addClass("fieldError"); }
        if (!(mpAuto.val() == "Y" || mpAuto.val() == "N")) { eMsg += "Metric Period 'Is Automatic' Flag Must be 'Y' or 'N'\n"; mpAuto.addClass("fieldError"); }
        if (mpDispText.val() == "") { eMsg += "The Metric Column Display Text is Required\n"; mpDispText.addClass("fieldError"); }

        if ($('#selRange').val() == "Invalid Goal") {
            eMsg += "The Metric Period Goal is not Valid."; $('#selRange').addClass("fieldError");
        }

        if (eMsg == "") { return true; }
        else {
            alert(eMsg);
            return false;
        }

    }

    function parseGoal(range1, range2) {
        var validGoal = true;
        var minVal = parseInt($('#leftRange').prop("min"));
        var maxVal = parseInt($('#leftRange').prop("max"));
        var formattingChar = (("@metricType" == "pct") ? "%" : "");

        if (range1 == 'NaN' || range2 == 'NaN' || minVal == 'NaN' || maxVal == 'NaN') { return "Goal Can't be Parsed"; }
        if (range1 == range2) { return "Invalid Goal"; }

        if (range1 < range2) {//Standard Position
            if (range1 == maxVal) {

            }
            return $('#leftRange').val() + formattingChar + " to " + $('#rightRange').val() + formattingChar;
        }
        else { //Crossed position
            if (range1 == maxVal && range2 == minVal) { return "Invalid Goal"; }
            if (range1 == maxVal) { return "Les than " + $('#rightRange').val() + formattingChar; }
            if (range2 == minVal) { return "greater than " + $('#leftRange').val() + formattingChar; }
            return "Less than " + $('#rightRange').val() + formattingChar + " or greater than " + $('#leftRange').val() + formattingChar;
        }

    }

    $(document).ready(function () {
        var originalToken = $('#mtrc_period_token').val();
        $("#effStartDate").datepicker({
            showOtherMonths: true,
            selectOtherMonths: true
        });
        $("#effEndDate").datepicker({
            showOtherMonths: true,
            selectOtherMonths: true
        });


        $('#leftRange, #rightRange').change(function () {
            $('#selRange').val(parseGoal(parseInt($('#leftRange').val()), parseInt($('#rightRange').val())));
            if ($('#selRange').val() == "Goal Can't be Parsed" || $('#selRange').val() == "Invalid Goal") {
                $('#addMP').prop('disabled', true);
                $('#selRange').addClass("fieldError");
            }
            else {
                $('#addMP').prop('disabled', false);
                $('#selRange').removeClass("fieldError");
            }
            $('#pageModified').val("Y");  //Flag the current page as modified
            reloadFill();
        });

        //Debug Form Values Buttong for Debugging only
        $('#btnDebug').click(function () {
            var queryString = $('#frmAddMP').serialize();
            alert("Query String is: \n" + queryString);

            var fieldValuePairs = $('#frmAddMP').serializeArray();
            var formJson = "{";
            var formData = "";
            $.each(fieldValuePairs, function (index, fieldValuePair) {
                formData = formData + "Item " + index + " is [" + fieldValuePair.name + "," + fieldValuePair.value + "]\n";
                formJson += '"' + fieldValuePair.name + '" : "' + fieldValuePair.value + '", ';
            });
            alert(formData);
            return;
            //Add the Columns Order to the Json Data
            var newSeq = 10;
            var columnData = "";
            //formJson += '"ColumnOrder" : [' +
            //      { "firstName":"John", "lastName":"Doe" },
            //      { "firstName":"Anna", "lastName":"Smith" },
            //      { "firstName":"Peter", "lastName":"Jones" }

            mtrc_prod_id
            prod_id
            mtrc_period_id
            mtrc_prod_top_lvl_parent_yn
            mtrc_prod_display_text
            mtrc_prod_display_order
            mtrc_prod_eff_start_dt
            mtrc_prod_eff_end_dt

            $('.column').each(function () {
                var mProdId = $(this).find(".mProdId").first().val();
                var colName = $(this).find("#colName").first().html();
                var oldSeq = $(this).find(".colOrder").first().val();
                if ((newSeq.toString()) != oldSeq && oldSeq != "999") {
                    message = message + mProdId + "~" + colName + "~" + oldSeq + "~" + newSeq + ",\n";
                }
                //if ( newSeq.toString() != oldSeq) {
                //    message = message + (oldSeq == "999") ? "": $(this).children("#colName").first().val() + "~" + oldSeq + "~" + newSeq + ",";
                //}
                newSeq = newSeq + 10;
            });


            //    var message = "";
            //    var newSeq = 10;
            //    $('.column').each(function () {
            //        var mProdId = $(this).find(".mProdId").first().val();
            //        var colName = $(this).find("#colName").first().html();
            //        var oldSeq = $(this).find(".colOrder").first().val();

            //        if ((newSeq.toString()) != oldSeq && oldSeq != "999") {
            //            message = message + mProdId + "~" + colName + "~" + oldSeq + "~" + newSeq + ",\n";
            //        }
            //        //if ( newSeq.toString() != oldSeq) {
            //        //    message = message + (oldSeq == "999") ? "": $(this).children("#colName").first().val() + "~" + oldSeq + "~" + newSeq + ",";
            //        //}
            //        newSeq = newSeq + 10;
            //    });
            //    if (message == "") message = "No changes Detected";
            //    alert(message);











            alert("Json Data: \n" + formJson);
            //alert("Full Form Elements Data: \n" + formData);
        });


        //Hides asterisk from Metric Period Detail fields with default values after those values have been changed.
        $("#frmAddMP").on('change', ".form-control", function () {
            $('#addMP').prop('disabled', false);
            $(this).removeClass("fieldError");
            $(this).siblings(".indicate-defaulted-value").removeClass("asterisk");
            $(this).css("background-color", "white");
            $('#pageModified').val("Y");  //Flag the current page as modified
        });

        //Force Uppercase text for Selected Fields in Add MP Details Popup View
        $("#frmAddMP").on('change', ".mustUpperCase", function () {
            $(this).val($(this).val().toUpperCase());
        });


        $('#mtrc_id').change(function () {
            if ($('#pageModified').val() == "Y") {
                if (confirm("Current Changes have not been Saved.\nDiscard Changes?")) {
                    alert("Changes have been discarded.");
                }
                else {
                    alert("Keep working then");
                }

                var question = "Current Changes have not been Saved.\nDiscard Changes?";
                showConfirmation(question).then(function (answer) {
                    //var ansbool = Boolean.parse(answer.toString());
                    if (answer == 'true') { //TRUE
                        alert("You Answered Yes.\nGo to Id: " + $(this).val());
                        //window.location.href = "/MetricPeriod/AddMetricPeriod/" + $(this).val();
                    } else { //FALSE
                        //Return Drop Down List back to it's previous value
                        $('#mtrc_id').val($('#orig_mtrc_id').val());
                        alert("You Answered NO!");
                        //No Action taken.
                    }
                });
            }
            else {
                window.location.href = "/MetricPeriod/AddMetricPeriod/" + $(this).val();
            }
        });

        $('#tpt_id').change(function () {

            var selectedText = document.getElementById("tpt_id").options[document.getElementById('tpt_id').selectedIndex].text;
            var tokenPrefix = "";
            switch (selectedText) {
                case "Day":
                    tokenPrefix = "DLY";
                    break;
                case "Hour":
                    tokenPrefix = "HRLY";
                    break;
                case "Minute":
                    tokenPrefix = "MIN";
                    break;
                case "Month":
                    tokenPrefix = "MNTH";
                    break;
                case "Quarter":
                    tokenPrefix = "QTR";
                    break;
                case "Second":
                    tokenPrefix = "SCND";
                    break;
                case "Week":
                    tokenPrefix = "WKLY";
                    break;
                case "Year":
                    tokenPrefix = "YRLY";
                    break;
                default:
                    tokenPrefix = "_";
                    break;

            }
            $('#mtrc_period_token').val(originalToken + tokenPrefix);
        });

        $('#addMP').click(function () {
            if (validateInput()) {
                alert("Saving has not been enable yet. Will be done soon...")
            }
            else {
                $('#addMP').prop('disabled', true);
            }
        });

        $('#btnReset').click(function () {
            if ($('#pageModified').val() == "Y") {
                if (confirm("Current Changes have not been Saved.\nDiscard Changes?")) {
                    window.location.href = "/MetricPeriod/AddMetricPeriod/" + $('#mtrc_id').val();
                }
                else {
                    alert("Keep working then");
                }
            }
        });

        $('#mtrc_prod_display_text').change(function () {
            if ($(this).val() == "") { $('.newColumn').html("NEW METRIC"); }
            else { $('.newColumn').html($(this).val()); }
            //alert("Name Changed");
        });

    });

</script>

