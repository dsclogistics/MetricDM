@model MetricDM.Models.MTRC_METRIC

@{
    ViewBag.Title = "Edit";
}
<style>
    .boxsizingBorder {
    -webkit-box-sizing: border-box;
       -moz-box-sizing: border-box;
            box-sizing: border-box;
}
    .fieldError {
        background-color: #ffaf96;
    }
</style>
<h2>Metric Maintenance</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <hr />
    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.mtrc_id)

        <div class="row">
            <div class="col-xs-5">
                <div class="form-group">
                    @Html.LabelFor(model => model.mtrc_name, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.mtrc_name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.mtrc_name, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-xs-3">
                <div class="form-group">
                    @Html.LabelFor(model => model.mtrc_token, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.mtrc_token, new { htmlAttributes = new { @class = "form-control requireUpper" } })
                        @Html.ValidationMessageFor(model => model.mtrc_token, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-xs-3">
                <div class="form-group">
                    <label class="control-label col-md-2" for="data_type_id">Data Type</label>
                    <div class="col-md-10">
                        @Html.DropDownList("data_type_id", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.data_type_id, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-xs-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.mtrc_desc, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.mtrc_desc, new { htmlAttributes = new { @class = "form-control boxsizingBorder", style = "width:100% !important; ", cols="100", rows="5" } })
                            @Html.ValidationMessageFor(model => model.mtrc_desc, "", new { @class = "text-danger" })
                        </div>
                    </div>
            </div>
        </div>

        <div class="row">
            <div class="col-xs-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.mtrc_eff_start_dt, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.mtrc_eff_start_dt, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.mtrc_eff_start_dt, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-xs-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.mtrc_eff_end_dt, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.mtrc_eff_end_dt, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.mtrc_eff_end_dt, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-xs-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.mtrc_min_val, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.mtrc_min_val, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.mtrc_min_val, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-xs-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.mtrc_max_val, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.mtrc_max_val, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.mtrc_max_val, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>


        <div class="row">
            <div class="col-xs-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.mtrc_max_dec_places, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.mtrc_max_dec_places, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.mtrc_max_dec_places, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-xs-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.mtrc_max_str_size, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.mtrc_max_str_size, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.mtrc_max_str_size, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>




            <div class="form-group">
                @Html.LabelFor(model => model.mtrc_na_allow_yn, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.mtrc_na_allow_yn, new { htmlAttributes = new { @class = "form-control requireUpper yn" } })
                    @Html.ValidationMessageFor(model => model.mtrc_na_allow_yn, "", new { @class = "text-danger" })
                </div>
            </div>
        <br />
        <div class="row" style="text-align:center">
            <input type="submit" value="Save" class="btn btn-primary" />
         @if (ViewBag.canBeDeleted != null && ViewBag.canBeDeleted == "Y")
         {
            <input type="button" id="btnDeleteMetric" value="Delete" class="btn btn-warning" style="margin-left:25px"/>
         }
        </div>
    </div>
}

<div id="divPostMessage">

</div>
<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
  @Scripts.Render("~/bundles/jqueryval")

  <script>
      $(document).ready(function () {
          $('.requireUpper').change(function () {
              $(this).val($(this).val().toUpperCase());
          });
          $('.form-control').change(function () {
              $(this).val($(this).val().trim());
              $(this).removeClass('fieldError');
          });

          $('.yn').change(function () {
              var answer = $(this).val().trim().toUpperCase();
              if (!(answer == 'Y' || answer == 'N')) {
                  $(this).addClass('fieldError');
              }
              $(this).val($(this).val().trim());
          });


          $('#btnDeleteMetric').click(function () {
              
              if (confirm("Are you sure you want to Delete this Metric?")) {
                  var metricId = $('#mtrc_id').val();

                  //--------- Perform actual Deletion via ajax -------------
                  $.ajax({
                      type: 'POST', // define the type of HTTP verb we want to use (POST for our form)
                      //method    : 'POST',
                      url: '/Metric/Delete', // the url where we want to POST
                      //data    : { id: idToDisplay },     //<---- Data Parameters (if not already passed in the Url)
                      data: {
                          id: metricId
                      }, // our data object created earlier
                      //dataType  : 'json', // what type of data do we expect back from the server (Remove line if expecting html [partial or full]view result)
                      //encode    : true,
                      cache: false,
                      //--- On error, execute this function ------
                      error: function (xhr, status, error) {
                          $("#divPostMessage").removeClass('alert-success');
                          $("#divPostMessage").addClass('alert-danger');
                          $("#divPostMessage").html("Error Deleting Metric: \n" + error);
                          $('#btnDeleteMetric').button('reset');
                          $("#divPostMessage").show().fadeOut(6000);
                          //alert("An Error has Occurred.");  //<-- Trap and alert of any errors if they occurred
                      }
                  }).done(function (d) {
                      //This code Executes After the Ajax call completes successfully
                      //$("#divPostMessage").removeClass('alert-danger');
                      //$("#divPostMessage").addClass('alert-success');
                      showAlert(d,"success", "Y");
                      //location.reload(true);
                  });
              }
          });

      });
  </script>    
}

